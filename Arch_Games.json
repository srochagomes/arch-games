{
  "name": "Arch Games",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "55bb9880-0bf3-4553-b291-65bd90e45cf6",
        "authentication": "basicAuth",
        "options": {
          "noResponseBody": true
        }
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -3720,
        -160
      ],
      "id": "d360093a-d74e-455c-bcae-42d476603931",
      "name": "Webhook",
      "webhookId": "55bb9880-0bf3-4553-b291-65bd90e45cf6",
      "notesInFlow": false,
      "credentials": {
        "httpBasicAuth": {
          "id": "52QwikhBcl9n60z3",
          "name": "api"
        }
      }
    },
    {
      "parameters": {
        "resource": "image",
        "operation": "analyze",
        "modelId": {
          "__rl": true,
          "value": "gpt-4o-2024-11-20",
          "mode": "list",
          "cachedResultName": "GPT-4O-2024-11-20"
        },
        "text": "=You are a digital analyst for a corporate game system. Based on uploaded image(s), extract and classify the shared activity and return the following JSON structure, fully minified and valid:\n\n{\n  \"participants\":[{...},{...}],\n  \"activity\":{...}\n}\n\nInputs (do not change):\n- team: {{ $json.body.team }}\n- team_id: {{ $json.body.team_id }}\n- date_activity: {{ $json.body.activityDate }}\n- key_process: {{ $json.body.key_process }}\n- participants: {{ $json.body.participants }}\n\nInstructions:\n1. For each participant:\n- Use name → participant\n- Use id → participant_id\n- Use type as-is\n- Copy: team, team_id, date_activity → date, key_process\n\n2. Process shared activity only once and reuse it for all.\n\n3. Handle time logic:\n- If start + duration_minutes → calculate end\n- If only duration_hours → convert to duration_minutes\n- If no date → use activityDate\n\n4. Extract and classify the shared activity into ONE of the following categories, based on the image context:\n- \"physical_activity\" → Workout apps, GPS, pace, time, distance, steps, calories, maps (e.g., Strava, Garmin).\n- \"duolingo\" → Duolingo UI, XP points, streaks, language, levels.\n- \"professional_training\" → Certificates, courses (Udemy, Coursera, Alura), modules, lessons, platform names.\n- \"corporate_meeting\" → Zoom/Teams/Meet screens, meeting titles, agendas, attendees.\n- \"happy_hour\" → Informal gathering, food, drinks, group selfies, social moments.\n- \"books\" → Book covers, reading logs, summaries, author names, digital reader screenshots.\n- \"games\" → Quizzes, scoreboards, podiums, trivia, results.\n- \"amigo_de_valor\" → Recognition messages, badges, appreciation, helpful actions, compliments.\n- \"blood_donation\" → Certificates, hospital symbols, blood bags, donation scenes.\n- \"lacre_event\" → Tabs, bottles, collections for charity, quantity of materials.\n\n- In the \"activity\" block, extract or infer any visual detail and assign it to the proper attribute:\n  e.g., \"description\", \"location\", \"platform\", \"duration_minutes\", \"start\", \"participants\", \"photo_provided\", etc.\n  If start and duration_minutes exist, calculate end\n  If only duration_hours exists, convert to duration_minutes\n  If no date found, use activityDate as date\n\n5.Only return fields with actual values. If a field is null, empty, or undefined → remove it from output.\n\nRules:\n- Remove null, undefined, or empty fields\n- Output must be a **single valid JSON object** with `participants` and `activity`\n- Keys and values must be in double quotes\n- DO NOT return markdown (```), comments, placeholders, explanation\n- NO line breaks or unnecessary space (minified JSON)\n- All values must be in Brazilian Portuguese\n- Final output must be valid for `JSON.parse()`\n\nExample (structure only, do not reuse values):\n\n{\"participants\":[{\"category\":\"happy_hour\", \"participant\":\"Nome\",\"participant_id\":\"UUID\",\"team_id\":\"13\",\"team\":\"Equipe\",\"date\":\"2025-05-20\",\"key_process\":\"UUID\",\"type\":\"participant\"}],\"activity\":{\"description\":\"Extraído\",\"platform\":\"Duolingo\",\"points\":300,\"duration_minutes\":45,\"start\":\"2025-05-20T09:00:00\",\"end\":\"2025-05-20T09:45:00\"}}\n",
        "inputType": "base64",
        "binaryPropertyName": "={{ $json.body.fileNames }}",
        "options": {
          "maxTokens": "={{ parseInt($json.body.maxTokens) || 300 }}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        -3500,
        -160
      ],
      "id": "3300db9f-2735-4c18-bf82-5576b92ec4da",
      "name": "OpenAI",
      "alwaysOutputData": true,
      "retryOnFail": true,
      "executeOnce": true,
      "notesInFlow": true,
      "waitBetweenTries": 4000,
      "credentials": {
        "openAiApi": {
          "id": "QFyegtlUHr8iOXWC",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const raw = $json[\"content\"]\n  .replace(/```json/g, \"\")\n  .replace(/```/g, \"\")\n  .trim();\n\ntry {\n  const parsed = JSON.parse(raw);\n\n  const participants = parsed.participants;\n  const activity = parsed.activity;\n\n  if (!Array.isArray(participants)) {\n    throw new Error(\"Expected 'participants' to be an array\");\n  }\n\n  const items = participants.map(p => ({\n    ...p,\n    category : activity.category,\n    activity\n  }));\n\n  // Retorna um único objeto com atributo `items`\n  return {\n    json: {\n      items\n    }\n  };\n} catch (e) {\n  throw new Error(\"Failed to parse or process JSON:\\n\" + e.message + \"\\nRaw:\\n\" + raw);\n}\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3280,
        -160
      ],
      "id": "e78c81e3-1d2b-4bae-afaa-b375233d3201",
      "name": "Code"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Participant-split').item.json.category }}",
                    "rightValue": "professional_training",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "fb0d0eb4-2670-4f34-89a1-06c235801ca8"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "professional_training"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "2f71ed07-9b69-4e24-9847-4013f26e697d",
                    "leftValue": "={{ $('Participant-split').item.json.category }}",
                    "rightValue": "physical_activity",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "physical_activity"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "4d1bae62-a3f4-4cc8-8670-362db26ba590",
                    "leftValue": "={{ $('Participant-split').item.json.category }}",
                    "rightValue": "duolingo",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "duolingo"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "47b12ec8-01ef-4fe2-a1aa-9bf3ada416fc",
                    "leftValue": "={{ $('Participant-split').item.json.category }}",
                    "rightValue": "corporate_meeting",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "corporate_meeting"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "015c3629-81b7-46e8-b290-e9a9998727e8",
                    "leftValue": "={{ $('Participant-split').item.json.category }}",
                    "rightValue": "happy_hour",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "happy_hour"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "973b38c8-f425-464c-86c0-16361c784c91",
                    "leftValue": "={{ $('Participant-split').item.json.category }}",
                    "rightValue": "books",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "books"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "77a5104d-c4c6-4167-8c0b-7cf065dcb522",
                    "leftValue": "={{ $('Participant-split').item.json.category }}",
                    "rightValue": "games",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "games"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "3d70d667-6276-438e-9f9d-6891b0c4277b",
                    "leftValue": "={{ $('Participant-split').item.json.category }}",
                    "rightValue": "amigo_de_valor",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "amigo_de_valor"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "ab6d6157-f09d-4f7c-8208-c0f16c24befb",
                    "leftValue": "={{ $('Participant-split').item.json.category }}",
                    "rightValue": "blood_donation",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "blood_donation"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "acc5775d-aedf-473c-b51e-c90faaa4f58e",
                    "leftValue": "={{ $('Participant-split').item.json.category }}",
                    "rightValue": "lacre_event",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "lacre_event"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "78a2d531-357d-4b12-ab9e-97dde5c7155a",
                    "leftValue": "={{ $('Participant-split').item.json.category }}",
                    "rightValue": "not_found",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "not_found"
            }
          ]
        },
        "options": {
          "fallbackOutput": 10
        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -2620,
        -328
      ],
      "id": "2715b65f-4e61-4e06-a876-15e94d5ab222",
      "name": "Switch",
      "executeOnce": false,
      "alwaysOutputData": false,
      "retryOnFail": true
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const input = $('Participant-split').item.json;\nconst totalScore = $(\"Total Pontos Dia\").item.json.totalScore || 0;\n\nif (input.category !== \"professional_training\" || !input.activity) {\n  return [{ json: { score: 0, message: \"Not applicable\" } }];\n}\n\nconst activity = input.activity;\nlet score = 0;\nconst duration = activity.duration_minutes || 0;\n\n// Regra: 200 pontos a cada 60 minutos, mínimo de 60 min\nif (duration >= 60) {\n  score = Math.floor(duration / 60) * 200;\n} else {\n  return [{ json: { ...input, base_score: 0, calculated_score: 0, message: \"Curso muito curto ou não pontuável\" } }];\n}\n\n// Multiplicador por tipo\nconst type = (input.type || \"\").toLowerCase();\nlet multiplier = 1.0;\nif (type === \"captain\") {\n  multiplier = 1.5;\n} else if (type === \"governance\") {\n  multiplier = 1.8;\n}\n\nlet calculatedScore = Math.round(score * multiplier);\n\n\nreturn {\n  json: {\n    ...input,\n    base_score: score,\n    multiplier,\n    calculated_score: calculatedScore,\n    total_before: totalScore,\n    total_after: totalScore + calculatedScore\n  }\n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2400,
        -1160
      ],
      "id": "0dac50c6-e02d-4b5e-a2a1-90fd980acf6a",
      "name": "professional_training_rule"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const input = $('Participant-split').item.json;\nconst totalScore = $(\"Total Pontos Dia\").item.json.totalScore || 0;\n\nif (input.category !== \"physical_activity\" || !input.activity) {\n  return [{ json: { score: 0, message: \"Not applicable\" } }];\n}\n\nconst activity = input.activity;\n\n// Step 1: Validate duration\nif (!activity.duration_minutes || activity.duration_minutes < 15) {\n  return [{ json: { score: 0, message: \"Menos de 15 minutos - sem pontuação\" } }];\n}\n\n// Step 2: Apply capped duration\nconst effectiveMinutes = Math.min(activity.duration_minutes, 90);\nconst blocks = Math.floor(effectiveMinutes / 15);\nlet score = blocks * 100;\n\n// Step 3: Apply multiplier by participant type\nconst type = (input.type || \"\").toLowerCase();\nlet multiplier = 1.0;\nif (type === \"captain\") {\n  multiplier = 1.5;\n} else if (type === \"governance\") {\n  multiplier = 1.8;\n}\n\nlet calculatedScore = Math.round(score * multiplier);\n\n// Step 4: Apply daily limit for this category\nconst DAILY_LIMIT = 600;\nif (totalScore + calculatedScore > DAILY_LIMIT) {\n  calculatedScore = Math.max(0, DAILY_LIMIT - totalScore);\n}\n\n// Step 5: Return full object with score breakdown\nreturn {\n  json: {\n    ...input,\n    base_score: score,\n    multiplier,\n    calculated_score: calculatedScore,\n    total_before: totalScore,\n    total_after: totalScore + calculatedScore\n  }\n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2400,
        -960
      ],
      "id": "ddd9748e-864b-4f8f-be10-9d855b145892",
      "name": "physical_activity_rule"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const input = $('Participant-split').item.json;\nconst totalScore = $(\"Total Pontos Dia\").item.json.totalScore || 0;\n\nif (input.category !== \"duolingo\" || !input.activity) {\n  return [{ json: { score: 0, message: \"Not applicable\" } }];\n}\n\nconst activity = input.activity;\nlet score = 10;\n\nif (activity.points >= 300) score += 10;\nif (activity.level) score += 5;\nif (activity.streak_days >= 5) score += 5;\nif (activity.screenshot_provided === true) score += 5;\n\nconst type = (input.type || \"participant\").toLowerCase();\nlet multiplier = 1.0;\n\nif (type === \"captain\") multiplier = 1.5;\nelse if (type === \"governance\") multiplier = 1.8;\n\nlet calculatedScore = Math.round(score * multiplier);\nconst DAILY_LIMIT = 1000;\n\ncalculatedScore = Math.max(0, Math.min(calculatedScore, DAILY_LIMIT - totalScore));\n\nreturn {\n  json: {\n    ...input,\n    base_score: score,\n    multiplier,\n    calculated_score: calculatedScore,\n    total_before: totalScore,\n    total_after: totalScore + calculatedScore\n  }\n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2400,
        -760
      ],
      "id": "dd965bcf-caf7-46a8-8577-d6a263ed80b9",
      "name": "duolingo_rule"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const input = $('Participant-split').item.json;\nconst totalScore = $(\"Total Pontos Dia\").item.json.totalScore || 0;\n\nif (input.category !== \"happy_hour\" || !input.activity || input.quantityParticipants < 3) {\n  return [{ json: { score: 0, message: \"Menos de 3 participantes ou categoria inválida\" } }];\n}\n\nconst activity = input.activity;\nlet score = 300;\n\n// Evento oficial tem pontuação fixa\nif (activity.official_event === true) {\n  score = 500;\n} else if (activity.full_team === true) {\n  score += 200;\n}\n\n// Multiplicador por tipo\nconst type = (input.type || \"\").toLowerCase();\nlet multiplier = 1.0;\n\nif (type === \"captain\") {\n  multiplier = 1.5;\n} else if (type === \"governance\") {\n  multiplier = 1.8;\n}\n\nlet calculated_score = Math.round(score * multiplier);\n\n// Limite diário (1000 pts)\nconst DAILY_LIMIT = 1000;\nif (totalScore + calculated_score > DAILY_LIMIT) {\n  calculated_score = Math.max(0, DAILY_LIMIT - totalScore);\n}\n\nreturn {\n  json: {\n    ...input,\n    base_score: score,\n    multiplier,\n    calculated_score,\n    total_before: totalScore,\n    total_after: totalScore + calculated_score\n  }\n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2400,
        -360
      ],
      "id": "8ec4f79f-b1fe-4a88-87de-307fd830b7e9",
      "name": "happy_hour_rule",
      "alwaysOutputData": false,
      "executeOnce": false
    },
    {
      "parameters": {
        "jsCode": "const input = $('Participant-split').item.json;\nconst totalScore = $(\"Total Pontos Dia\").item.json.totalScore || 0;\n\nif (input.category !== \"corporate_meeting\" || !input.activity) {\n  return [{ json: { score: 0, message: \"Not applicable\" } }];\n}\n\nconst activity = input.activity;\nlet score = activity.general_meeting === true ? 300 : 200;\n\n// Bônus por resumo curto (<= 200 caracteres)\nif (!activity.general_meeting && activity.summary && activity.summary.length <= 200) {\n  score += 100;\n}\n\nconst type = (input.type || \"participant\").toLowerCase();\nlet multiplier = 1.0;\n\nif (type === \"captain\") multiplier = 1.5;\nelse if (type === \"governance\") multiplier = 1.8;\n\nlet calculatedScore = Math.round(score * multiplier);\nconst DAILY_LIMIT = 1000;\n\ncalculatedScore = Math.max(0, Math.min(calculatedScore, DAILY_LIMIT - totalScore));\n\nreturn {\n  json: {\n    ...input,\n    base_score: score,\n    multiplier,\n    calculated_score: calculatedScore,\n    total_before: totalScore,\n    total_after: totalScore + calculatedScore\n  }\n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2400,
        -560
      ],
      "id": "110718e9-18ff-40da-b92b-ca71af3428f2",
      "name": "corporate_meeting_rule"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const input = $('Participant-split').item.json;\nconst totalScore = $(\"Total Pontos Dia\").item.json.totalScore || 0;\n\nif (input.category !== \"books\" || !input.activity) {\n  return [{ json: { score: 0, message: \"Not applicable\" } }];\n}\n\nconst activity = input.activity;\nlet score = 0;\n\n// Validação obrigatória\nif (!activity.summary_submitted || !activity.summary_text || activity.summary_text.trim().length < 50) {\n  return [{ json: { score: 0, message: \"Resumo inválido ou ausente\" } }];\n}\n\n// Pontuação por páginas\nif (activity.pages) {\n  const pages = activity.pages;\n  if (pages <= 150) score = 500;\n  else if (pages <= 300) score = 700;\n  else if (pages <= 500) score = 900;\n  else score = 1100;\n}\n// Pontuação por minutos (audiobook)\nelse if (activity.duration_minutes) {\n  const min = activity.duration_minutes;\n  if (min <= 15) score = 100;\n  else if (min <= 30) score = 200;\n  else if (min <= 45) score = 300;\n  else if (min <= 60) score = 400;\n  else if (min <= 75) score = 500;\n  else score = 600;\n} else {\n  return [{ json: { score: 0, message: \"Sem páginas ou minutos válidos para pontuar\" } }];\n}\n\n// Multiplicador por tipo\nconst type = (input.type || \"\").toLowerCase();\nlet multiplier = 1.0;\nif (type === \"captain\") multiplier = 1.5;\nelse if (type === \"governance\") multiplier = 1.8;\n\nlet calculated_score = Math.round(score * multiplier);\n\n// Limite diário\nconst DAILY_LIMIT = 1000;\nif (totalScore + calculated_score > DAILY_LIMIT) {\n  calculated_score = Math.max(0, DAILY_LIMIT - totalScore);\n}\n\nreturn {\n  json: {\n    ...input,\n    base_score: score,\n    multiplier,\n    calculated_score,\n    total_before: totalScore,\n    total_after: totalScore + calculated_score\n  }\n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2400,
        -160
      ],
      "id": "76c88b38-cf15-4a2c-99dd-8f24cf826528",
      "name": "books_rule"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const input = $('Participant-split').item.json;\nconst totalScore = $(\"Total Pontos Dia\").item.json.totalScore || 0;\n\nif (input.category !== \"games\" || !input.activity) {\n  return [{ json: { score: 0, message: \"Not applicable\" } }];\n}\n\nconst activity = input.activity;\nlet score = 0;\n\n// Requisito mínimo\nif (!activity.duration_minutes || activity.duration_minutes < 30) {\n  return [{ json: { score: 0, message: \"Tempo insuficiente para pontuar\" } }];\n}\n\nconst duration = activity.duration_minutes;\n\n// Pontuação base por tempo\nif (duration >= 90) score = 300;\nelse if (duration >= 60) score = 200;\nelse if (duration >= 30) score = 100;\n\n// Bônus por tipo de jogo\nif (activity.type && [\"trivia\", \"quiz\"].includes(activity.type.toLowerCase())) {\n  score += 50;\n}\n\n// Bônus por posição no ranking\nif (activity.rank && activity.rank >= 1 && activity.rank <= 3) {\n  score += 50;\n}\n\n// Screenshot bônus\nif (activity.screenshot_provided === true) {\n  score += 20;\n}\n\n// Multiplicador\nconst type = (input.type || \"\").toLowerCase();\nlet multiplier = 1.0;\nif (type === \"captain\") multiplier = 1.5;\nelse if (type === \"governance\") multiplier = 1.8;\n\nlet calculated_score = Math.round(score * multiplier);\n\n// Limite diário\nconst DAILY_LIMIT = 1000;\nif (totalScore + calculated_score > DAILY_LIMIT) {\n  calculated_score = Math.max(0, DAILY_LIMIT - totalScore);\n}\n\nreturn {\n  json: {\n    ...input,\n    base_score: score,\n    multiplier,\n    calculated_score,\n    total_before: totalScore,\n    total_after: totalScore + calculated_score\n  }\n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2400,
        40
      ],
      "id": "857ad4f0-53d9-43e1-9262-3be6f268f685",
      "name": "games_rule"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const input = $('Participant-split').item.json;\nconst totalScore = $(\"Total Pontos Dia\").item.json.totalScore || 0;\n\nif (input.category !== \"amigo_de_valor\" || !input.activity || !input.date) {\n  return [{ json: { score: 0, message: \"Not applicable\" } }];\n}\n\nconst activity = input.activity;\nconst date = input.date.split(\"T\")[0]; // Only the date part (YYYY-MM-DD)\nconst openingDate = activity.campaign_opening_date || null;\n\nlet score = 0;\n\n// Scoring rules\nif (openingDate && openingDate === date) {\n  score = 500;\n} else {\n  score = 300;\n}\n\n// Multiplier by participant type\nconst type = (input.type || \"\").toLowerCase();\nlet multiplier = 1.0;\n\nif (type === \"captain\") multiplier = 1.5;\nelse if (type === \"governance\") multiplier = 1.8;\n\nlet calculated_score = Math.round(score * multiplier);\n\n// Daily limit enforcement\nconst DAILY_LIMIT = 1000;\nif (totalScore + calculated_score > DAILY_LIMIT) {\n  calculated_score = Math.max(0, DAILY_LIMIT - totalScore);\n}\n\nreturn {\n  json: {\n    ...input,\n    base_score: score,\n    multiplier,\n    calculated_score,\n    total_before: totalScore,\n    total_after: totalScore + calculated_score\n  }\n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2400,
        240
      ],
      "id": "665e2f0b-c989-4854-b0d7-63c35e3f33e7",
      "name": "amigo_de_valor_rule"
    },
    {
      "parameters": {
        "jsCode": "const input = $('Participant-split').item.json;\nconst totalScore = $(\"Total Pontos Dia\").item.json.totalScore || 0;\n\nif (input.category !== \"blood_donation\" || !input.activity) {\n  return [{ json: { score: 0, message: \"Not applicable\" } }];\n}\n\nconst activity = input.activity;\nlet score = 300; // Pontuação base\n\n// Bônus por tipo de doação especificado\nif (activity.type && activity.type.trim() !== \"\") {\n  score += 50;\n}\n\n// Bônus por certificado\nif (activity.certificate_provided === true) {\n  score += 50;\n}\n\n// Bônus por foto\nif (activity.photo_taken === true) {\n  score += 100;\n}\n\n// Multiplicador por tipo de participante\nconst type = (input.type || \"\").toLowerCase();\nlet multiplier = 1.0;\nif (type === \"captain\") multiplier = 1.5;\nelse if (type === \"governance\") multiplier = 1.8;\n\nlet calculatedScore = Math.round(score * multiplier);\n\n// Aplicar limite diário (1000 pontos)\nconst DAILY_LIMIT = 1000;\nif (totalScore + calculatedScore > DAILY_LIMIT) {\n  calculatedScore = Math.max(0, DAILY_LIMIT - totalScore);\n}\n\nreturn {\n  json: {\n    ...input,\n    base_score: score,\n    multiplier,\n    calculated_score: calculatedScore,\n    total_before: totalScore,\n    total_after: totalScore + calculatedScore\n  }\n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2400,
        440
      ],
      "id": "a220d756-5c59-45cd-b19c-7f2fb59aa58a",
      "name": "blood_donation_rule"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const input = $('Participant-split').item.json;\nconst totalScore = $(\"Total Pontos Dia\").item.json.totalScore || 0;\n\nif (input.category !== \"lacre_event\" || !input.activity) {\n  return [{ json: { score: 0, message: \"Not applicable\" } }];\n}\n\nconst activity = input.activity;\nlet score = 0;\n\n// Pontuação por colocação\nif (activity.position === 1) {\n  score = 1000;\n} else if (activity.position === 2) {\n  score = 600;\n} else if (activity.position === 3) {\n  score = 500;\n} else if (activity.position >= 4) {\n  score = 400;\n} else {\n  // Posição indefinida ou não fornecida\n  score = 100;\n}\n\n// Multiplicador por tipo\nconst type = (input.type || \"\").toLowerCase();\nlet multiplier = 1.0;\nif (type === \"captain\") multiplier = 1.5;\nelse if (type === \"governance\") multiplier = 1.8;\n\n// Calcula score com multiplicador\nlet calculated_score = Math.round(score * multiplier);\n\n// Aplica limite diário\nconst DAILY_LIMIT = 1000;\nif (totalScore + calculated_score > DAILY_LIMIT) {\n  calculated_score = Math.max(0, DAILY_LIMIT - totalScore);\n}\n\nreturn {\n  json: {\n    ...input,\n    base_score: score,\n    multiplier,\n    calculated_score,\n    total_before: totalScore,\n    total_after: totalScore + calculated_score\n  }\n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2400,
        640
      ],
      "id": "08ce0b28-a851-48bc-a3c8-be9a62fc38ab",
      "name": "lacre_event_rule"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const input = $('Participant-split').item.json;\n\n// Força resposta padrão para categoria não encontrada\nreturn {\n  json: {\n    ...input,\n    category: \"not_found\",\n    base_score: 0,\n    multiplier: 1.0,\n    calculated_score: 0\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2400,
        840
      ],
      "id": "863aac41-93e7-4182-9d6a-021c40b86a4e",
      "name": "not_found_rule"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://192.168.15.138:5446/api/activities",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Accept",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{$json}}",
        "options": {
          "batching": {
            "batch": {
              "batchSize": 1
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -2180,
        -160
      ],
      "id": "bd9de931-04fc-402a-9636-639c0f4ac540",
      "name": "Arch Games HTTP Request",
      "executeOnce": false,
      "alwaysOutputData": false,
      "retryOnFail": true,
      "notesInFlow": true
    },
    {
      "parameters": {
        "url": "=http://192.168.15.138:5446/api/rankings/daily-scores",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "date",
              "value": "={{ $json.date.slice(0,10) }}"
            },
            {
              "name": "participantId",
              "value": "={{ $json.participant_id }}"
            },
            {
              "name": "teamId",
              "value": "={{ $json.team_id }}"
            },
            {
              "name": "category",
              "value": "={{ $json.category }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -2840,
        -160
      ],
      "id": "5ade7359-b743-4139-8925-986a59f1757b",
      "name": "Total Pontos Dia",
      "executeOnce": false,
      "retryOnFail": true,
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "fieldToSplitOut": "items",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        -3060,
        -160
      ],
      "id": "31051d5d-1360-4b85-a6b3-da6bc35ba213",
      "name": "Participant-split",
      "alwaysOutputData": false
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "OpenAI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Participant-split",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "professional_training_rule",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "physical_activity_rule",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "duolingo_rule",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "corporate_meeting_rule",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "happy_hour_rule",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "books_rule",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "games_rule",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "amigo_de_valor_rule",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "blood_donation_rule",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "lacre_event_rule",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "not_found_rule",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "professional_training_rule": {
      "main": [
        [
          {
            "node": "Arch Games HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "physical_activity_rule": {
      "main": [
        [
          {
            "node": "Arch Games HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "duolingo_rule": {
      "main": [
        [
          {
            "node": "Arch Games HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "corporate_meeting_rule": {
      "main": [
        [
          {
            "node": "Arch Games HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "happy_hour_rule": {
      "main": [
        [
          {
            "node": "Arch Games HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "books_rule": {
      "main": [
        [
          {
            "node": "Arch Games HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "games_rule": {
      "main": [
        [
          {
            "node": "Arch Games HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "lacre_event_rule": {
      "main": [
        [
          {
            "node": "Arch Games HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "amigo_de_valor_rule": {
      "main": [
        [
          {
            "node": "Arch Games HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "blood_donation_rule": {
      "main": [
        [
          {
            "node": "Arch Games HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "not_found_rule": {
      "main": [
        [
          {
            "node": "Arch Games HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Arch Games HTTP Request": {
      "main": [
        []
      ]
    },
    "Total Pontos Dia": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Participant-split": {
      "main": [
        [
          {
            "node": "Total Pontos Dia",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1",
    "callerPolicy": "workflowsFromSameOwner"
  },
  "versionId": "6e3fa16f-fba5-45e1-a4f9-6b3b916cd2e8",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "3d38ed6a3803a92368d20274d1c690b41504b09bb6f3116231a48bb6ff5e1db6"
  },
  "id": "gqq62LQI3XCRSl6N",
  "tags": []
}