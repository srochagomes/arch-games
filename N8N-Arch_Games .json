{
  "name": "Arch Games",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "55bb9880-0bf3-4553-b291-65bd90e45cf6",
        "authentication": "basicAuth",
        "options": {
          "noResponseBody": true
        }
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -3720,
        -380
      ],
      "id": "d360093a-d74e-455c-bcae-42d476603931",
      "name": "Webhook",
      "webhookId": "55bb9880-0bf3-4553-b291-65bd90e45cf6",
      "notesInFlow": false,
      "credentials": {
        "httpBasicAuth": {
          "id": "52QwikhBcl9n60z3",
          "name": "api"
        }
      }
    },
    {
      "parameters": {
        "resource": "image",
        "operation": "analyze",
        "modelId": {
          "__rl": true,
          "value": "chatgpt-4o-latest",
          "mode": "list",
          "cachedResultName": "CHATGPT-4O-LATEST"
        },
        "text": "=You are a digital analyst for a corporate game system. Based on one or more uploaded **photos**, extract and classify all relevant information about a list of participants and their shared activity. Then, generate a **JSON array**, where each item represents one participant with their specific data and role.\n\nContextual data provided from the system:\n\n- `team`: {{ $json.body.team }}\n- `activityDate`: {{ $json.body.activityDate }}\n- `uploadDate`: {{ $json.body.uploadDate }}\n- `key_process`: {{ $json.body.key_process }} (this is a unique system-generated identifier ‚Äî never change it)\n- `participants`: {{ $json.body.participants }}\n\n---\n\n### üìã Instructions\n\n1. Carefully examine the uploaded image(s). Look for any visual cues such as:\n   - Screenshots of apps, fitness trackers, certificates, meeting slides, scoreboards, books, or volunteer efforts\n   - Printed or handwritten notes\n   - Labels like \"name\", \"date\", \"XP\", \"distance\", or \"duration\"\n\n2. For each participant listed in the input, create a separate JSON object with their corresponding:\n   - `name`\n   - `type` (participant, captain, or governance)\n   - Shared `team`, `key_process`, and `date` (from `activityDate`)\n\n3. Classify the activity into one of the following categories:\n   - `physical_activity`\n   - `duolingo`\n   - `professional_training`\n   - `corporate_meeting`\n   - `happy_hour`\n   - `books`\n   - `games`\n   - `amigo_de_valor`\n   - `blood_donation`\n   - `lacre_event`\n\n4. Extract or infer all relevant fields per participant.  \n   If a field is **missing but can be derived**, do so:\n\n#### üîÅ Derivation Rules:\n- If `end` is **not present**, but `start` and `duration_minutes` exist ‚Üí calculate `end = start + duration_minutes`\n- If `start` is missing, but `end` and `duration_minutes` are present ‚Üí calculate `start = end - duration_minutes`\n- If only `duration_hours` is provided ‚Üí convert to `duration_minutes`\n- If `date` is not explicit ‚Üí use `activityDate` or `start` timestamp\n- ‚ö†Ô∏è Do **not change or guess** the `key_process` ‚Äî copy it as-is from input\n\n5. Do **not include** any field in the output if its value is `null`, empty, or unknown\n\n6. Return a **valid JSON array** where each object follows this pattern, using only values detected in the context or confidently inferred\n\n---\n\n### ‚úÖ Output format (structure only ‚Äî values must be extracted from the context)\n\n```json\n[\n  {\n    \"participant\": \"<extracted or listed name>\",\n    \"team\": \"<team from input>\",\n    \"date\": \"<inferred or activityDate>\",\n    \"type\": \"<participant | captain | governance>\",\n    \"category\": \"<classified category>\",\n    \"key_process\": \"<original input value>\",\n    \"activity\": {\n      \"description\": \"<extracted activity description>\",\n      \"distance_km\": 5.2,\n      \"duration_minutes\": 45,\n      \"start\": \"2025-05-12T06:00:00\",\n      \"end\": \"2025-05-12T06:45:00\",\n      \"tracker\": \"<extracted tracker name>\",\n      \"screenshot_provided\": true\n    }\n  },\n  {\n    \"participant\": \"<next participant>\",\n    \"team\": \"<team from input>\",\n    \"date\": \"<inferred or activityDate>\",\n    \"type\": \"<participant | captain | governance>\",\n    \"category\": \"<classified category>\",\n    \"key_process\": \"<original input value>\",\n    \"activity\": {\n      ...\n    }\n  }\n]\n",
        "inputType": "base64",
        "binaryPropertyName": "imageFiles",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        -3280,
        -380
      ],
      "id": "3300db9f-2735-4c18-bf82-5576b92ec4da",
      "name": "OpenAI",
      "alwaysOutputData": true,
      "retryOnFail": true,
      "executeOnce": true,
      "notesInFlow": true,
      "waitBetweenTries": 4000,
      "credentials": {
        "openAiApi": {
          "id": "QFyegtlUHr8iOXWC",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const raw = $json[\"content\"];\n\n// Remove blocos de markdown como ```json e ```\nconst cleaned = raw\n  .replace(/```json/g, '')\n  .replace(/```/g, '')\n  .trim();\n\ntry {\n  const parsedArray = JSON.parse(cleaned);\n\n  if (!Array.isArray(parsedArray)) {\n    throw new Error(\"Expected an array of participants.\");\n  }\n\n  // Retorna um √∫nico item com todos os dados agrupados em \"items\"\n  return [{\n    json: {\n      items: parsedArray\n    }\n  }];\n} catch (e) {\n  throw new Error(\"Failed to parse JSON: \" + e.message);\n}\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2980,
        -380
      ],
      "id": "e78c81e3-1d2b-4bae-afaa-b375233d3201",
      "name": "Code"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.category }}",
                    "rightValue": "professional_training",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "fb0d0eb4-2670-4f34-89a1-06c235801ca8"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "professional_training"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "2f71ed07-9b69-4e24-9847-4013f26e697d",
                    "leftValue": "={{ $json.category }}",
                    "rightValue": "physical_activity",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "physical_activity"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "4d1bae62-a3f4-4cc8-8670-362db26ba590",
                    "leftValue": "={{ $json.category }}",
                    "rightValue": "duolingo",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "duolingo"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "47b12ec8-01ef-4fe2-a1aa-9bf3ada416fc",
                    "leftValue": "={{ $json.category }}",
                    "rightValue": "corporate_meeting",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "corporate_meeting"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "015c3629-81b7-46e8-b290-e9a9998727e8",
                    "leftValue": "={{ $json.category }}",
                    "rightValue": "happy_hour",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "happy_hour"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "973b38c8-f425-464c-86c0-16361c784c91",
                    "leftValue": "={{ $json.category }}",
                    "rightValue": "books",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "books"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "77a5104d-c4c6-4167-8c0b-7cf065dcb522",
                    "leftValue": "={{ $json.category }}",
                    "rightValue": "games",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "games"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "3d70d667-6276-438e-9f9d-6891b0c4277b",
                    "leftValue": "={{ $json.category }}",
                    "rightValue": "amigo_de_valor",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "amigo_de_valor"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "ab6d6157-f09d-4f7c-8208-c0f16c24befb",
                    "leftValue": "={{ $json.category }}",
                    "rightValue": "blood_donation",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "blood_donation"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "acc5775d-aedf-473c-b51e-c90faaa4f58e",
                    "leftValue": "={{ $json.category }}",
                    "rightValue": "lacre_event",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "lacre_event"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "78a2d531-357d-4b12-ab9e-97dde5c7155a",
                    "leftValue": "={{ $json.category }}",
                    "rightValue": "not_found",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "not_found"
            }
          ]
        },
        "options": {
          "fallbackOutput": 10
        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -2380,
        -540
      ],
      "id": "2715b65f-4e61-4e06-a876-15e94d5ab222",
      "name": "Switch",
      "executeOnce": false,
      "alwaysOutputData": false,
      "retryOnFail": true
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const input = $json;\n\nif (input.category !== \"professional_training\" || !input.activity) {\n  return [{ json: { score: 0, message: \"Not applicable\" } }];\n}\n\nconst activity = input.activity;\nlet score = 0;\n\n// Base score for certificate\nif (activity.certificate === true) {\n  score += 50;\n} else {\n  score += 30;\n}\n\n// Bonus for long duration\nif (activity.duration_hours && activity.duration_hours >= 8) {\n  score += 10;\n}\n\n// Bonus for known platforms\nconst recognizedPlatforms = [\"Coursera\", \"Udemy\", \"LinkedIn Learning\", \"AWS Training\"];\nif (activity.platform && recognizedPlatforms.includes(activity.platform)) {\n  score += 10;\n}\n\n// Apply multiplier by type\nconst type = (input.type || \"\").toLowerCase();\n\nlet multiplier = 1.0;\nif (type === \"capit√£o\") {\n  multiplier = 1.2;\n} else if (type === \"governan√ßa\") {\n  multiplier = 0.8;\n}\n\nconst finalScore = Math.round(score * multiplier);\n\nreturn {\n  json: {\n    ...input,\n    base_score: score,\n    multiplier: multiplier,\n    calculated_score: finalScore\n  }\n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1940,
        -1160
      ],
      "id": "0dac50c6-e02d-4b5e-a2a1-90fd980acf6a",
      "name": "professional_training_rule"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const input = $json;\n\nif (input.category !== \"physical_activity\" || !input.activity) {\n  return [{ json: { score: 0, message: \"Not applicable\" } }];\n}\n\nconst activity = input.activity;\nlet score = 0;\n\n// Base points\nscore += 10;\n\n// Distance\nif (activity.distance_km && activity.distance_km >= 5) {\n  score += 10;\n}\n\n// Duration\nif (activity.duration_minutes && activity.duration_minutes >= 30) {\n  score += 10;\n}\n\n// Tracker used\nif (activity.tracker) {\n  score += 5;\n}\n\n// Screenshot\nif (activity.screenshot_provided === true) {\n  score += 5;\n}\n\n// Apply multiplier based on type\nconst type = (input.type || \"\").toLowerCase();\n\nlet multiplier = 1.0;\nif (type === \"capit√£o\") {\n  multiplier = 1.2;\n} else if (type === \"governan√ßa\") {\n  multiplier = 0.8;\n}\n\nconst finalScore = Math.round(score * multiplier);\n\nreturn {\n  json: {\n    ...input,\n    base_score: score,\n    multiplier: multiplier,\n    calculated_score: finalScore\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1940,
        -1000
      ],
      "id": "ddd9748e-864b-4f8f-be10-9d855b145892",
      "name": "physical_activity_rule"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const input = $json;\n\nif (input.category !== \"duolingo\" || !input.activity) {\n  return [{ json: { score: 0, message: \"Not applicable\" } }];\n}\n\nconst activity = input.activity;\nlet score = 0;\n\n// Base score\nscore += 10;\n\n// XP bonus\nif (activity.points && activity.points >= 300) {\n  score += 10;\n}\n\n// Bonus if level is defined\nif (activity.level) {\n  score += 5;\n}\n\n// Bonus for streak\nif (activity.streak_days && activity.streak_days >= 5) {\n  score += 5;\n}\n\n// Screenshot bonus\nif (activity.screenshot_provided === true) {\n  score += 5;\n}\n\n// Apply multiplier by type\nconst type = (input.type || \"\").toLowerCase();\nlet multiplier = 1.0;\n\nif (type === \"capit√£o\") {\n  multiplier = 1.2;\n} else if (type === \"governan√ßa\") {\n  multiplier = 0.8;\n}\n\nconst finalScore = Math.round(score * multiplier);\n\nreturn {\n  json: {\n    ...input,\n    base_score: score,\n    multiplier: multiplier,\n    calculated_score: finalScore\n  }\n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1940,
        -820
      ],
      "id": "dd965bcf-caf7-46a8-8577-d6a263ed80b9",
      "name": "duolingo_rule"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const input = $json;\n\nif (input.category !== \"happy_hour\" || !input.activity) {\n  return [{ json: { score: 0, message: \"Not applicable\" } }];\n}\n\nconst activity = input.activity;\nlet score = 0;\n\n// Base participation\nscore += 10;\n\n// Bonus for photo\nif (activity.photo_provided === true) {\n  score += 5;\n}\n\n// Bonus for group of 3+\nif (Array.isArray(activity.attendees) && activity.attendees.length >= 3) {\n  score += 5;\n}\n\n// Apply multiplier by type\nconst type = (input.type || \"\").toLowerCase();\nlet multiplier = 1.0;\n\nif (type === \"capit√£o\") {\n  multiplier = 1.2;\n} else if (type === \"governan√ßa\") {\n  multiplier = 0.8;\n}\n\nconst finalScore = Math.round(score * multiplier);\n\nreturn {\n  json: {\n    ...input,\n    base_score: score,\n    multiplier: multiplier,\n    calculated_score: finalScore\n  }\n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1940,
        -480
      ],
      "id": "8ec4f79f-b1fe-4a88-87de-307fd830b7e9",
      "name": "happy_hour_rule",
      "alwaysOutputData": false,
      "executeOnce": false
    },
    {
      "parameters": {
        "jsCode": "const input = $json;\n\nif (input.category !== \"corporate_meeting\" || !input.activity) {\n  return [{ json: { score: 0, message: \"Not applicable\" } }];\n}\n\nconst activity = input.activity;\nlet score = 0;\n\n// Base points\nscore += 10;\n\n// Bonus for meeting duration\nif (activity.duration_minutes && activity.duration_minutes >= 60) {\n  score += 5;\n}\n\n// Bonus for screenshot or print\nif (activity.screenshot_provided === true) {\n  score += 5;\n}\n\n// Bonus for group meeting\nif (Array.isArray(activity.participants) && activity.participants.length >= 3) {\n  score += 5;\n}\n\n// Apply multiplier by type\nconst type = (input.type || \"\").toLowerCase();\nlet multiplier = 1.0;\n\nif (type === \"capit√£o\") {\n  multiplier = 1.2;\n} else if (type === \"governan√ßa\") {\n  multiplier = 0.8;\n}\n\nconst finalScore = Math.round(score * multiplier);\n\nreturn {\n  json: {\n    ...input,\n    base_score: score,\n    multiplier: multiplier,\n    calculated_score: finalScore\n  }\n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1940,
        -640
      ],
      "id": "110718e9-18ff-40da-b92b-ca71af3428f2",
      "name": "corporate_meeting_rule"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const input = $json;\n\nif (input.category !== \"books\" || !input.activity) {\n  return [{ json: { score: 0, message: \"Not applicable\" } }];\n}\n\nconst activity = input.activity;\nlet score = 0;\n\n// Base for reading a book\nscore += 10;\n\n// Bonus: pages > 200\nif (activity.pages && activity.pages > 200) {\n  score += 10;\n}\n\n// Bonus: summary submitted\nif (activity.summary_submitted === true) {\n  score += 5;\n}\n\n// Bonus: non-empty summary text\nif (activity.summary_text && activity.summary_text.trim().length >= 50) {\n  score += 5;\n}\n\n// Apply multiplier by type\nconst type = (input.type || \"\").toLowerCase();\nlet multiplier = 1.0;\n\nif (type === \"capit√£o\") {\n  multiplier = 1.2;\n} else if (type === \"governan√ßa\") {\n  multiplier = 0.8;\n}\n\nconst finalScore = Math.round(score * multiplier);\n\nreturn {\n  json: {\n    ...input,\n    base_score: score,\n    multiplier: multiplier,\n    calculated_score: finalScore\n  }\n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1940,
        -320
      ],
      "id": "76c88b38-cf15-4a2c-99dd-8f24cf826528",
      "name": "books_rule"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const input = $json;\n\nif (input.category !== \"games\" || !input.activity) {\n  return [{ json: { score: 0, message: \"Not applicable\" } }];\n}\n\nconst activity = input.activity;\nlet score = 0;\n\n// Base participation\nscore += 10;\n\n// Bonus for quiz/trivia type\nif (activity.type && [\"trivia\", \"quiz\"].includes(activity.type.toLowerCase())) {\n  score += 5;\n}\n\n// Bonus for 10 or more participants\nif (activity.participants && activity.participants >= 10) {\n  score += 5;\n}\n\n// Bonus for podium finish (rank 1‚Äì3)\nif (activity.rank && activity.rank >= 1 && activity.rank <= 3) {\n  score += 10;\n}\n\n// Bonus for screenshot\nif (activity.screenshot_provided === true) {\n  score += 5;\n}\n\n// Apply multiplier by type\nconst type = (input.type || \"\").toLowerCase();\nlet multiplier = 1.0;\n\nif (type === \"capit√£o\") {\n  multiplier = 1.2;\n} else if (type === \"governan√ßa\") {\n  multiplier = 0.8;\n}\n\nconst finalScore = Math.round(score * multiplier);\n\nreturn {\n  json: {\n    ...input,\n    base_score: score,\n    multiplier: multiplier,\n    calculated_score: finalScore\n  }\n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1940,
        -160
      ],
      "id": "857ad4f0-53d9-43e1-9262-3be6f268f685",
      "name": "games_rule"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const input = $json;\n\nif (input.category !== \"amigo_de_valor\" || !input.activity) {\n  return [{ json: { score: 0, message: \"Not applicable\" } }];\n}\n\nconst activity = input.activity;\nlet score = 0;\n\n// Base for having a kind/helpful action\nscore += 10;\n\n// Bonus: recognized_by filled\nif (activity.recognized_by && activity.recognized_by.trim() !== \"\") {\n  score += 10;\n}\n\n// Bonus: feedback/document/photo marked as submitted\nif (activity.feedback_given === true) {\n  score += 5;\n}\n\n// Apply multiplier by type\nconst type = (input.type || \"\").toLowerCase();\nlet multiplier = 1.0;\n\nif (type === \"capit√£o\") {\n  multiplier = 1.2;\n} else if (type === \"governan√ßa\") {\n  multiplier = 0.8;\n}\n\nconst finalScore = Math.round(score * multiplier);\n\nreturn {\n  json: {\n    ...input,\n    base_score: score,\n    multiplier: multiplier,\n    calculated_score: finalScore\n  }\n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1940,
        180
      ],
      "id": "665e2f0b-c989-4854-b0d7-63c35e3f33e7",
      "name": "amigo_de_valor_rule"
    },
    {
      "parameters": {
        "jsCode": "const input = $json;\n\nif (input.category !== \"blood_donation\" || !input.activity) {\n  return [{ json: { score: 0, message: \"Not applicable\" } }];\n}\n\nconst activity = input.activity;\nlet score = 0;\n\n// Base score for donation\nscore += 20;\n\n// Bonus if type of donation is specified\nif (activity.type && activity.type.trim() !== \"\") {\n  score += 5;\n}\n\n// Bonus if certificate was provided\nif (activity.certificate_provided === true) {\n  score += 5;\n}\n\n// Bonus if photo was taken\nif (activity.photo_taken === true) {\n  score += 5;\n}\n\n// Apply multiplier based on type\nconst type = (input.type || \"\").toLowerCase();\nlet multiplier = 1.0;\n\nif (type === \"capit√£o\") {\n  multiplier = 1.2;\n} else if (type === \"governan√ßa\") {\n  multiplier = 0.8;\n}\n\nconst finalScore = Math.round(score * multiplier);\n\nreturn {\n  json: {\n    ...input,\n    base_score: score,\n    multiplier: multiplier,\n    calculated_score: finalScore\n  }\n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1940,
        360
      ],
      "id": "a220d756-5c59-45cd-b19c-7f2fb59aa58a",
      "name": "blood_donation_rule"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const input = $json;\n\nif (input.category !== \"lacre_event\" || !input.activity) {\n  return [{ json: { score: 0, message: \"Not applicable\" } }];\n}\n\nconst activity = input.activity;\nlet score = 0;\n\n// Base score for participating in event\nscore += 10;\n\n// Bonus: photo was provided\nif (activity.photo_provided === true) {\n  score += 5;\n}\n\n// Bonus: collected tabs ‚â• 500\nif (activity.tabs_collected && activity.tabs_collected >= 500) {\n  score += 10;\n}\n\n// Bonus: placed among top 3\nif (activity.position && activity.position >= 1 && activity.position <= 3) {\n  score += 5;\n}\n\n// Apply multiplier based on type\nconst type = (input.type || \"\").toLowerCase();\nlet multiplier = 1.0;\n\nif (type === \"capit√£o\") {\n  multiplier = 1.2;\n} else if (type === \"governan√ßa\") {\n  multiplier = 0.8;\n}\n\nconst finalScore = Math.round(score * multiplier);\n\nreturn {\n  json: {\n    ...input,\n    base_score: score,\n    multiplier: multiplier,\n    calculated_score: finalScore\n  }\n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1940,
        0
      ],
      "id": "08ce0b28-a851-48bc-a3c8-be9a62fc38ab",
      "name": "lacre_event_rule"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const input = $json;\n\n// For√ßa resposta padr√£o para categoria n√£o encontrada\nreturn {\n  json: {\n    ...input,\n    category: \"not_found\",\n    base_score: 0,\n    multiplier: 1.0,\n    calculated_score: 0\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1940,
        560
      ],
      "id": "863aac41-93e7-4182-9d6a-021c40b86a4e",
      "name": "not_found_rule"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://192.168.15.138:5446/api/activities",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Accept",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{$json}}",
        "options": {
          "batching": {
            "batch": {
              "batchSize": 1
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1080,
        -380
      ],
      "id": "bd9de931-04fc-402a-9636-639c0f4ac540",
      "name": "Arch Games HTTP Request",
      "executeOnce": false,
      "alwaysOutputData": false,
      "retryOnFail": true,
      "notesInFlow": true
    },
    {
      "parameters": {
        "fieldToSplitOut": "items",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        -2760,
        -380
      ],
      "id": "31051d5d-1360-4b85-a6b3-da6bc35ba213",
      "name": "Split Out",
      "alwaysOutputData": false
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "OpenAI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "professional_training_rule",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "physical_activity_rule",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "duolingo_rule",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "corporate_meeting_rule",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "happy_hour_rule",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "books_rule",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "games_rule",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "amigo_de_valor_rule",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "blood_donation_rule",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "lacre_event_rule",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "not_found_rule",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "professional_training_rule": {
      "main": [
        [
          {
            "node": "Arch Games HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "physical_activity_rule": {
      "main": [
        [
          {
            "node": "Arch Games HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "duolingo_rule": {
      "main": [
        [
          {
            "node": "Arch Games HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "corporate_meeting_rule": {
      "main": [
        [
          {
            "node": "Arch Games HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "happy_hour_rule": {
      "main": [
        [
          {
            "node": "Arch Games HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "books_rule": {
      "main": [
        [
          {
            "node": "Arch Games HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "games_rule": {
      "main": [
        [
          {
            "node": "Arch Games HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "lacre_event_rule": {
      "main": [
        [
          {
            "node": "Arch Games HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "amigo_de_valor_rule": {
      "main": [
        [
          {
            "node": "Arch Games HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "blood_donation_rule": {
      "main": [
        [
          {
            "node": "Arch Games HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "not_found_rule": {
      "main": [
        [
          {
            "node": "Arch Games HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Arch Games HTTP Request": {
      "main": [
        []
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "c4ddae6b-ae55-4a35-ba57-6f7be0f17eef",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "1f0810f0cd4a78059c7072f98a7dd941e8c6ca3dcafda09bb95e07cf60953c90"
  },
  "id": "gqq62LQI3XCRSl6N",
  "tags": []
}